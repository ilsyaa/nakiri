generator client {
  provider = "prisma-client-js"
  output   = "../app/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model DeviceAuth {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  session String
  key     String
  value   Json?

  @@unique([session, key])
  @@index([session])
  @@map("device_auths")
}

model Bot {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  prefixes  Json
  owners    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bots")
}

// --- start groups model ---

enum accessFeatures {
  adminonly
  everyone
}

model Group {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  groupId          String
  subject          String
  visible          Boolean        @default(false)
  link             String         @default("")
  publicFeatures   Json           @default("[]")
  accessFeatures   accessFeatures @default(everyone)
  joinApprovalMode Boolean
  maxStrike        Int
  wordBlocker      Json
  antiMention      Json
  welcome          Json
  activityScore    Boolean
  lang             String         @default("en")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  participants GroupParticipant[]

  @@unique([groupId])
  @@map("groups")
}

model GroupParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String
  jid       String
  isAdmin   Boolean
  strike    Int
  score     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [groupId])

  @@unique([groupId, jid])
  @@map("group_participants")
}

model GroupTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("group_tags")
}

// --- end groups model ---

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  jid          String
  pushName     String?  @default("")
  exp          Int      @default(0)
  subscription Json     @default("{}")
  banStatus    Json     @default("{}")
  token        String   @default("")
  lang         String   @default("en")
  balance      Float    @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
  Note                 Note[]

  @@unique([jid])
  @@map("users")
}

model Transaction {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  fromAddress String
  toAddress   String
  amount      Float
  fee         Float
  status      String @default("pending") // pending, confirmed, failed

  fromUser User? @relation("SentTransactions", fields: [fromAddress], references: [jid])
  toUser   User? @relation("ReceivedTransactions", fields: [toAddress], references: [jid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model CurrencyMetadata {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  maxSupply       Float
  currentSupply   Float
  initialReward   Float
  halvingInterval Int
  transferFee     Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("currency_metadatas")
}

model Note {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  code      String  @unique
  title     String
  content   String
  authorJid String
  password  String?

  author User @relation(fields: [authorJid], references: [jid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}
